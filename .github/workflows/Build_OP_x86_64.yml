#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_x86_64

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  
on: 
  release:
    types: [published]

  push:
    branches: 
      - master
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
       TERM: linux
       DEBIAN_FRONTEND: noninteractive
       FORCE_UNSAFE_CONFIGURE: 1

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment | 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Workflow runs on$(lsb_release -d)"
        sudo -E apt-get update
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "Asia/Shanghai"
        if [ "${{ env.DELETE_USELESS_FILES }}" == true ]
        then
            docker rmi $(docker images -q)
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
            sudo -E apt-get -y autoremove --purge
            sudo -E apt-get clean
        fi

    - name: Clone source code | 克隆源代码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        sudo chown $USER:$GROUPS openwrt
        cd openwrt
        
    - name: Add Package & Update & Install feeds
      working-directory: ./openwrt
      run: |
        sed -i '$a src-git lrst6963repo https://github.com/lrst6963/luci-app-cfddns' feeds.conf.default
        sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
        rm -rf feeds/smpackage/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd*,miniupnpd-iptables,wireless-regdb}
        ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: Import Packeage
      working-directory: ./openwrt
      run: |
        git clone https://github.com/lrst6963/luci-theme-material3 package/lrst6963repo     

    # - name: Configuration Customization - Build_x86_64
    #   env:
    #     CONFIG_FILE: 'config/x86_64.config'
    #   run: |
    #     [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
    #     cd openwrt && make defconfig
    #     sed -i '2a uci set luci.main.mediaurlbase='"'"'/luci-static/argonne'"'"'' package/lean/default-settings/files/zzz-default-settings
    #     cat .config
        
    - name: Download package | 下载引用库
      working-directory: ./openwrt
      run: |
        make download -j$(nproc) V=s

    - name: Build firmware | 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) || make -j1 V=s

    - name : Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt_x86_64
        path: openwrt/bin
